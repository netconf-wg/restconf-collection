# -*- org -*-

This document describes a collection resource for the RESTCONF
protocol to provide enhanced filtering features for
the retrieval of data nodes with the GET method.

* Introduction

There is a need for standard mechanisms to control the
filtering, sorting, and retrieval of data from RESTCONF devices.
A server may contain many instances of a particular YANG list.
Retrieval of the entire list at once can be extremely inefficiant.

Pagination mechanisms are needed to allow a client to iterate
through a large list, in a manner that is most efficient
for the application.

This document describes a "collection" resource 
that can be used to control retrieval of data nodes
from a RESTCONF server.

  [FIXME: describe basic needs
  - target resource picks the list
  - 'fields' is a node-set XPath expression to pick
     the subtrees within the target resource
    to return
  - 'where' is a boolean XPath expression to pick which list
    instances are selected for return
  - 'sort' is ??? parameter to sort the selected list instances
  - 'limit' is the max number of list instances returned
  - 'offset' is the XPath position() of the list instance
     ??? pre or post access control ???
     ??? if post, then what if NACM changes while client
         retrieving 
   ]

Collection resources represent search results through the
server data.  Data that the client is not authorized
to receive according to the access control parameters
configured in ^RFC6536^ MUST NOT be returned in
RESTCONF response messages.

** Terminology

The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in BCP
14, ^RFC2119^.


[FIXME: remove terms that are not used]

*** NETCONF

The following terms are defined in ^RFC6241^:

- candidate configuration datastore
- client
- configuration data
- datastore
- configuration datastore
- protocol operation
- running configuration datastore
- server
- startup configuration datastore
- state data
- user

*** HTTP

The following terms are defined in ^RFC3986^:

- fragment
- path
- query

The following terms are defined in ^RFC7230^:

- header
- message-body
- Request-Line
- request URI

The following terms are defined in ^RFC7231^:

- method
- request
- resource

The following terms are defined in ^RFC7232^:

- entity tag


*** YANG

The following terms are defined in ^RFC6020^:

- container
- data node
- key leaf
- leaf
- leaf-list
- list
- presence container (or P-container)
- RPC operation (now called protocol operation)
- non-presence container (or NP-container)
- ordered-by system
- ordered-by user

*** RESTCONF

The following terms are defined in ^I-D.ietf-netconf-restconf^:

- data resource
- target resource
- retrieval request

*** Terms

The following terms are used within this document:

- collection resource: a resource with the media type
"application/yang.collection+xml" or
"application/yang.collection+json".  Contains a set of
data resources.


*** URI Template

Throughout this document, the URI template ^RFC6570^ syntax
"{+restconf}" is used to refer to the RESTCONF API entry point outside
of an example.  See the root resource discovery serction defined
in ^I-D.ietf-netconf-restconf^ for details.

All of the examples in this document assume "/restconf" as the
discovered RESTCONF API root path.

*** Tree Diagrams

A simplified graphical representation of the data model is used in
this document.  The meaning of the symbols in these
diagrams is as follows:

- Brackets "[" and "]" enclose list keys.
- Abbreviations before data node names: "rw" means configuration
 data (read-write) and "ro" state data (read-only).
- Symbols after data node names: "?" means an optional node, "!" means
 a presence container, and "*" denotes a list and leaf-list.
- Parentheses enclose choice and case nodes, and case nodes are also
marked with a colon (":").
- Ellipsis ("...") stands for contents of subtrees that are not shown.

### END OF INTRODUCTION

** Collection Resource Type

The following resource type are defined in this document:

!! table RESTCONF Media Types
!! head ! Resource    ! Media Type
!! row  ! Collection  ! application/yang.collection

** Collection Resource @collection-resource@

A collection resource contains a set of data resources.  It is used to
represent a all instances or a subset of all instances in a YANG list
or leaf-list.

A collection resource can be retrieved with the GET method, optionally
with the query parameters "limit" (^limit^) and "offset" (^offset^).

The "ietf-restconf-collection" YANG module contains the
"application/yang.collection" restconf-media-type extension
which specifies the syntax and semantics of a "collection" media type.

** Query Parameters @query-parameters@

Each RESTCONF operation allows zero or more query
parameters to be present in the request URI.
The following query parameters are defined for RESTCONF collection
resources.

!! table RESTCONF Query Parameters
!! head ! Name ! Methods !  Description
!! row  ! limit ! GET ! Number of entries to return for collection resources
!! row  ! offset ! GET ! Starting point for collection resources
!! row  ! sort  ! GET ! Sorting criteria for collection resources
!! row  ! where  ! GET ! Boolean filter to select data instances for a collection resource


Query parameters can be given in any order.
Each parameter can appear at most once in a request URI.
A default value may apply if the parameter is missing.

Refer to ^main-examples^ for examples of query parameter usage.

If vendors define additional query parameters, they SHOULD use a
prefix (such as the enterprise or organization name) for query
parameter names in order to avoid collisions with other parameters.

*** Query Parameter URIs

A new set of RESTCONF Capability URNs are defined to identify the specific
query parameters supported by the server.

!! table RESTCONF Query Parameter URIs
!! head ! Name ! URI
!! row  ! page    ! urn:ietf:params:restconf:capability:page:1.0
!! row  ! page    ! urn:ietf:params:restconf:capability:page-xpath:1.0

*** The "limit" Query Parameter @limit@

The "limit" parameter is used to restrict the number of data resources
to return in response to GET requests on collection resources.

The value of the "limit" parameter is either an integer greater than
or equal to 1, or the string "unbounded".  The string "unbounded" is the
default value.

If the server includes the "page" query parameter URI in
the "capability" leaf-list in the "ietf-restconf-monitoring"
module defined in ^I-D.ietf-netconf-restconf^, then the "limit"
query parameter MUST be supported.

*** The "offset" Query Parameter @offset@

The "offset" parameter is used to specify the first data resource to
return in response to GET requests on collection resources.
Resources instances are numbered with consecutive integers
from 1 to the number of resource instances.

The value of the "offset" parameter is an integer greater than
or equal to 1.  The default value is 1.

If the server includes the "page" query parameter URI in
the "capability" leaf-list in "ietf-restconf-monitoring" module
defined in ^I-D.ietf-netconf-restconf^, then the "offset"
query parameter MUST be supported.

*** The "sort" Query Parameter @sort@

   [FIXME]


*** The "where" Query Parameter @where@

   [FIXME]

* RESTCONF Collection module @module@

The "ietf-restconf-collection" module defines conceptual definitions
within groupings, which are not meant to be implemented
as datastore contents by a server.

The "ietf-restconf" module from ^I-D.ietf-netconf-restconf^
is used by this module for the 'restconf-media-type'
extension definition.

RFC Ed.: update the date below with the date of RFC publication and
remove this note.

!! include-figure ietf-restconf-collection.yang extract-to="ietf-restconf-collection@2015-01-30.yang"

* IANA Considerations @iana@

** YANG Module Registry

This document registers three URIs in the IETF XML registry
^RFC3688^. Following the format in RFC 3688, the following
registration is requested to be made.

     URI: urn:ietf:params:xml:ns:yang:ietf-restconf-collection
     Registrant Contact: The NETMOD WG of the IETF.
     XML: N/A, the requested URI is an XML namespace.

This document registers three YANG modules in the YANG Module Names
registry ^RFC6020^.

  name:         ietf-restconf-collection
  namespace:    urn:ietf:params:xml:ns:yang:ietf-restconf-collection
  prefix:       rcoll
  // RFC Ed.: replace XXXX with RFC number and remove this note
  reference:    RFC XXXX

** application/yang Media Sub Types

The parent MIME media type for RESTCONF resources is application/yang,
which is defined in ^RFC6020^.  This document defines the following
sub-types for this media type.

   - collection

   Type name: application

   Subtype name: yang.xxx

   Required parameters: TBD

   Optional parameters: TBD

   Encoding considerations: TBD

   Security considerations: TBD

   Interoperability considerations: TBD

   // RFC Ed.: replace XXXX with RFC number and remove this note
   Published specification: RFC XXXX

** NETCONF Capability URNs

This document registers two capability identifiers in
"RESTCONF Protocol Capability URNs" registry


  Index
     Capability Identifier
  ------------------------

  :page
      urn:ietf:params:restconf:capability:page:1.0

  :page-xpath
      urn:ietf:params:restconf:capability:page-xpath:1.0


* Security Considerations

This section provides security considerations for the resources
defined by the RESTCONF protocol.  Security considerations for
HTTPS are defined in ^RFC2818^.  Security considerations for the
content manipulated by RESTCONF can be found in the documents
defining data models.

All security considerations that apply to resources
defined in ^I-D.ietf-netconf-restconf^ also apply
to the collection resource.

* Acknowledgements

The authors would like to thank for following for lively discussions
on list and in the halls (ordered by last name): Rex Fernando

*! start-appendix

* Change Log

    -- RFC Ed.: remove this section before publication.

The RESTCONF issue tracker can be found here:
https://github.com/netconf-wg/restconf/issues

** restconf-03 to restconf-collection-00

- Moved collection resource from RESTCONF to a new document

* Open Issues

    -- RFC Ed.: remove this section before publication.

The RESTCONF Collection issues are tracked on github.com:

   https://github.com/netconf-wg/restconf/issues

* RESTCONF Collection Examples @main-examples@

The examples within this document use the
"example-jukebox" YANG module defined in ^I-D.ietf-netconf-restconf^.

** "limit" Parameter

In this example, the client requests the first two "album" resources
for a given artist:

Request from client:

   GET /restconf/data/example-jukebox:jukebox/
      library/artist=Foo%20Fighters/album/?limit=2   HTTP/1.1
   Host: example.com
   Content-Type: application/yang.collection+xml

Response from server:

   HTTP/1.1 200 OK
   Date: Mon, 23 Apr 2012 17:01:00 GMT
   Server: example-server
   Cache-Control: no-cache
   Pragma: no-cache
   Content-Type: application/yang.collection+xml

   <collection xmlns="urn:ietf:params:xml:ns:yang:ietf-restconf"
     <album xmlns="http://example.com/ns/example-jukebox">
       <name>Foo Fighters</name>
       <year>1995</year>
       ...
     </album>
     <album xmlns="http://example.com/ns/example-jukebox">
       <name>The Color and the Shape</name>
       <year>1997</year>
       ...
     </album>
   </collection>

** "offset" Parameter

In this example, the client requests the next two albums, i.e., two
albums starting from two.

Request from client:

   GET /restconf/data/example-jukebox:jukebox/
      library/artist=Foo%20Fighters/album/?limit=2&offset=2  HTTP/1.1
   Host: example.com
   Content-Type: application/yang.collection+json

Response from server:

   HTTP/1.1 200 OK
   Date: Mon, 23 Apr 2012 17:02:00 GMT
   Server: example-server
   Cache-Control: no-cache
   Pragma: no-cache
   Content-Type: application/yang.collection+json

   {
     "collection": {
       "example-jukebox:album" : [
         {
           "year" : 1999,
           "name" : "There is Nothing Left to Loose",
           ...
         },
         {
          "year" : 2002,
          "name" : "One by One",
          ...
         }
       ]
     }
   }

** "sort" Parameter

   [FIXME]


** "where" Parameter

   [FIXME]

** "TopN" Use Case

  [FIXME: use-case using all parameters for topN for some list]


{{document:
    name ;
    ipr trust200902;
    category std;
    references restconf-collection-back.xml;
    title "RESTCONF Collection Resource";
    abbreviation "RESTCONF Collection";
    contributor "author:Andy Bierman:YumaWorks:andy@yumaworks.com";
    contributor "author:Martin Bjorklund:Tail-f Systems:mbj@tail-f.com";
    contributor "author:Kent Watsen:Juniper Networks:kwatsen@juniper.net";
}}
